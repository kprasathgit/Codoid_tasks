//How to create Method Overriding program in java
      // Method overriding can be created by writing same method and arguments in different class.
       // It exhibits at runtime so it called run time polymorphism. 


// Define the Employee class as the base class
class Employee {
     String name;
    String employeeId;
    int yearsOfExperience;

    // Constructor to initialize the Employee name, employeeId, and yearsOfExperience
    public Employee(String name, String employeeId, int yearsOfExperience) {
        this.name = name;
        this.employeeId = employeeId;
        this.yearsOfExperience = yearsOfExperience;
    }

    // calculate the salary of the employee based on the years of experience
    public double getSalary() {
        return 50000 + (yearsOfExperience * 1000);
    }

}


// Define the Manager class as a subclass of Employee
class Manager extends Employee {
    int numberOfProjectaccomplished;

  // Constructor to initialize the Manager object with name, employeeId, yearsOfExperience, and numberOfReports
    public Manager(String name, String employeeId, int yearsOfExperience, int numberOfProjectaccomplished) {
    	
        // Call the super class constructor initialize
        super(name, employeeId, yearsOfExperience);
        
     // Assigning value to current class variable
        this.numberOfProjectaccomplished = numberOfProjectaccomplished;
    }

  // Override the getSalary method 
    @Override
    public double getSalary() {
    	
        // Call the getSalary method of the super class to get the base salary
        double baseSalary = super.getSalary();
        
        // Add a bonus for Project accomplished
        double bonus = numberOfProjectaccomplished * 500;
        
        // Return the total salary 
        return baseSalary + bonus;
    }
}


// Define the Engineer class as a subclass of Employee
class Engineer extends Employee {
     boolean hasMasterDegree;

    // Constructor to initialize variables
    public Engineer(String name, String employeeId, int yearsOfExperience, boolean hasMasterDegree) {
    	
        // Call the super class constructor to initialize 
        super(name, employeeId, yearsOfExperience);
        
     // Assigning value to current class variable
        this.hasMasterDegree = hasMasterDegree;
    }

    // Override the getSalary method 
    @Override
    public double getSalary() {
    	
        // Call the getSalary method of the super class to get the base salary
        double baseSalary = super.getSalary();
        
        // Add a bonus if the engineer has a master's degree
        double bonus = hasMasterDegree ? 5000 : 0;
        
        // Return the total salary 
        return baseSalary + bonus;
    }
}



public class Question_79 {
    public static void main(String[] args) {
    	
        // Create a Manager object and call its getSalary method
        Manager manager = new Manager("Ganesh", "101", 9, 50);
        System.out.println("Manager salary: " + manager.getSalary());

        
        // Create an Engineer object and call its getSalary method
        Engineer engineer = new Engineer("Krishna prasath", "100", 11, true);
        System.out.println("Engineer salary: " + engineer.getSalary());
    }
}
